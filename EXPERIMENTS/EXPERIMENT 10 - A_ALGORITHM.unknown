#192424420

import heapq

def a_star(grid, start, goal):
    def heuristic(a, b): # Manhattan distance
        return abs(a[0] - b[0]) + abs(a[1] - b[1])

    open_list = [(0, start)] # (f_score, node)
    came_from = {}
    g_score = {start: 0}

    while open_list:
        _, current = heapq.heappop(open_list)

        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            return path[::-1]

        for dx, dy in [(0,1), (0,-1), (1,0), (-1,0)]: # Neighbors
            neighbor = (current[0] + dx, current[1] + dy)
            
            if 0 <= neighbor[0] < len(grid) and 0 <= neighbor[1] < len(grid[0]):
                if grid[neighbor[0]][neighbor[1]] == 1: # Obstacle
                    continue
                    
                tentative_g_score = g_score[current] + 1
                if neighbor not in g_score or tentative_g_score < g_score[neighbor]:
                    came_from[neighbor] = current
                    g_score[neighbor] = tentative_g_score
                    f_score = tentative_g_score + heuristic(neighbor, goal)
                    heapq.heappush(open_list, (f_score, neighbor))
    return None

# --- Example Usage ---
# 0 = empty, 1 = obstacle
grid = [
    [0, 0, 0, 0, 0],
    [0, 1, 1, 0, 0],
    [0, 0, 0, 1, 0],
    [1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0]
]
start_pos = (0, 0)
goal_pos = (4, 4)
path = a_star(grid, start_pos, goal_pos)
print(f"A* Path from {start_pos} to {goal_pos}: {path}")
