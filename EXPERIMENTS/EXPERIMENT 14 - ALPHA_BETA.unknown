# (Uses helper functions from Minimax)

def minimax_ab(b, depth, is_max, alpha, beta):
    score = evaluate(b)
    if score == 10: return score - depth
    if score == -10: return score + depth
    if not is_moves_left(b): return 0

    if is_max: # Maximizer
        best = -1000
        for i in range(3):
            for j in range(3):
                if b[i][j] == ' ':
                    b[i][j] = 'O'
                    best = max(best, minimax_ab(b, depth + 1, not is_max, alpha, beta))
                    b[i][j] = ' '
                    alpha = max(alpha, best)
                    if beta <= alpha: # Pruning
                        break
            if beta <= alpha: break
        return best
    else: # Minimizer
        best = 1000
        for i in range(3):
            for j in range(3):
                if b[i][j] == ' ':
                    b[i][j] = 'X'
                    best = min(best, minimax_ab(b, depth + 1, not is_max, alpha, beta))
                    b[i][j] = ' '
                    beta = min(beta, best)
                    if beta <= alpha: # Pruning
                        break
            if beta <= alpha: break
        return best

def find_best_move_ab(b):
    best_val = -1000
    best_move = (-1, -1)
    for i in range(3):
        for j in range(3):
            if b[i][j] == ' ':
                b[i][j] = 'O'
                move_val = minimax_ab(b, 0, False, -1000, 1000)
                b[i][j] = ' '
                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val
    return best_move
    
# --- Example Usage ---
test_board_ab = [
    ['X', 'O', 'X'],
    ['O', 'O', ' '],
    [' ', 'X', ' ']
]
ai_move_ab = find_best_move_ab(test_board_ab)
print(f"Alpha-Beta AI suggests move: {ai_move_ab}")
