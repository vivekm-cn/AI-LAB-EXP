# (Uses check_winner from the previous example)

board = [[' ' for _ in range(3)] for _ in range(3)]

def is_moves_left(b):
    return any(' ' in row for row in b)

def evaluate(b):
    # Same logic as check_winner but returns score
    lines = (b + [[b[i][j] for i in range(3)] for j in range(3)] +
             [[b[i][i] for i in range(3)]] + [[b[i][2-i] for i in range(3)]])
    for line in lines:
        if line[0] == line[1] == line[2]:
            if line[0] == 'O': return 10 # AI wins
            if line[0] == 'X': return -10 # Player wins
    return 0 # Draw or ongoing

def minimax(b, depth, is_max):
    score = evaluate(b)
    if score == 10: return score - depth
    if score == -10: return score + depth
    if not is_moves_left(b): return 0

    if is_max: # Maximizer's move (AI)
        best = -1000
        for i in range(3):
            for j in range(3):
                if b[i][j] == ' ':
                    b[i][j] = 'O'
                    best = max(best, minimax(b, depth + 1, not is_max))
                    b[i][j] = ' '
        return best
    else: # Minimizer's move (Player)
        best = 1000
        for i in range(3):
            for j in range(3):
                if b[i][j] == ' ':
                    b[i][j] = 'X'
                    best = min(best, minimax(b, depth + 1, not is_max))
                    b[i][j] = ' '
        return best

def find_best_move(b):
    best_val = -1000
    best_move = (-1, -1)
    for i in range(3):
        for j in range(3):
            if b[i][j] == ' ':
                b[i][j] = 'O' # Make a move
                move_val = minimax(b, 0, False)
                b[i][j] = ' ' # Undo the move
                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val
    return best_move

# --- Example Usage ---
# In a full game, you would call find_best_move() for the AI's turn.
test_board = [
    ['X', 'O', 'X'],
    ['O', 'O', ' '],
    [' ', 'X', ' ']
]
ai_move = find_best_move(test_board)
print(f"Minimax AI suggests move: {ai_move}")
