#192424420

import heapq

class PuzzleNode:
    """Represents a state in the 8-Puzzle."""
    def __init__(self, state, parent=None, g=0):
        self.state = state
        self.parent = parent
        self.g = g  # Cost from start
        self.h = self.calculate_manhattan_distance()
        self.f = self.g + self.h

    def __lt__(self, other):
        return self.f < other.f

    def calculate_manhattan_distance(self):
        distance = 0
        goal = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
        for i in range(3):
            for j in range(3):
                if self.state[i][j] != 0:
                    val = self.state[i][j]
                    goal_row, goal_col = divmod(val - 1, 3)
                    distance += abs(i - goal_row) + abs(j - goal_col)
        return distance

    def get_successors(self):
        successors = []
        # Find the position of the empty tile (0)
        x, y = -1, -1
        for i in range(3):
            for j in range(3):
                if self.state[i][j] == 0:
                    x, y = i, j
                    break
        
        # Possible moves: up, down, left, right
        moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        for dx, dy in moves:
            nx, ny = x + dx, y + dy
            if 0 <= nx < 3 and 0 <= ny < 3:
                new_state = [row[:] for row in self.state]
                new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
                successors.append(PuzzleNode(new_state, self, self.g + 1))
        return successors

def solve_8_puzzle(initial_state):
    start_node = PuzzleNode(initial_state)
    open_list = [start_node]
    closed_set = set()

    while open_list:
        current_node = heapq.heappop(open_list)

        if current_node.h == 0:
            path = []
            while current_node:
                path.append(current_node.state)
                current_node = current_node.parent
            return path[::-1]

        closed_set.add(tuple(map(tuple, current_node.state)))

        for successor in current_node.get_successors():
            if tuple(map(tuple, successor.state)) not in closed_set:
                heapq.heappush(open_list, successor)
    return None

# --- Example Usage ---
initial_state = [[1, 2, 3], [4, 0, 6], [7, 5, 8]]
solution_path = solve_8_puzzle(initial_state)
if solution_path:
    print("8-Puzzle Solution Found:")
    for state in solution_path:
        for row in state:
            print(row)
        print("-" * 10)
else:
    print("No solution found.")
